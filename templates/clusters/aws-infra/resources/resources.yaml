AWSTemplateFormatVersion: 2010-09-09
Description: Additional AWS resources for the {{cluster_name}} cluster

Parameters:
  VpcId:
    Type: String
  PrivateSubnetIds:
    Type: CommaDelimitedList
  PrivateRouteTableIds:
    Type: CommaDelimitedList
  ClusterNodesSecurityGroupId:
    Type: String
  OpenSearchVersion:
    Type: String
    AllowedValues: ['OpenSearch_2.15', 'OpenSearch_2.13', 'OpenSearch_2.11', 'OpenSearch_2.9','OpenSearch_2.7', 'OpenSearch_2.5', 'OpenSearch_2.3', 'OpenSearch_1.3']
    Default: 'OpenSearch_2.15'
  OpenSearchSingleNodeCluster:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  BackupRegion:
    Type: String
    Default: ''
    AllowedValues:
      - ''
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - ca-central-1
      - ap-south-1
      - ap-northeast-2
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1
      - eu-central-1
      - eu-west-1
      - eu-west-2
      - sa-east-1
  BackupRegionBucketNamePrefix:
    Type: String
    Default: ''
  DeliveryInstanceCount:
    Type: String
    Default: '2'
  CloudWatchAlarmsEnabled:
    Type: String
    Default: true
  AlarmsEmailAddress:
    Type: String
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
    ConstraintDescription: Email address required.
    Default: alarm@craftersoftware.com
  CloudOpsEmailAddress:
    Type: String
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
    ConstraintDescription: Email address required.
    Default: cloud-ops@craftersoftware.com
  AlarmsSlackChannelHookUrl:
    Type: String
  BlackoutWindowDay:
    Type: String
    Default: 7
    AllowedValues:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
  BlackoutWindowStartHour:
    Type: String
    Default: 16
  BlackoutWindowEndHour:
    Type: String
    Default: 17

Conditions:
  UseBackupRegion:
    !And [!Not [!Equals [!Ref BackupRegion, '']], !Not [!Equals [!Ref BackupRegionBucketNamePrefix, '']]]
  IsOpenSearchSingleNodeCluster:
    !Equals [true, !Ref OpenSearchSingleNodeCluster]
  CloudWatchAlarmsEnabled:
    !Equals [!Ref CloudWatchAlarmsEnabled, true]

Resources:
  ClusterLogsBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: {{cluster_logs_s3_bucket_name}}
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  AuthoringNodeGroupSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: {{cluster_name}}-authoring-nodegroup-sg
        GroupDescription: sg for authoring nodegroup in {{cluster_name}} to grant access to authoring loadblancer only
        VpcId: !Ref VpcId
        SecurityGroupIngress:
          - FromPort: '8080'
            IpProtocol: tcp
            ToPort: '8080'
            SourceSecurityGroupId: !Ref AuthoringBackendSecurityGroup
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: 0
            ToPort: 0
            CidrIp: 0.0.0.0/0

  AuthoringBackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: {{cluster_name}}-authoring-backend-sg
      GroupDescription: Backend sg for authoring LB in {{cluster_name}}
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  AuthoringFrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: {{cluster_name}}-authoring-frontend-sg
      GroupDescription: Frontend sg for authoring LB in {{cluster_name}}
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  DeliveryNodeGroupSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: {{cluster_name}}-delivery-nodegroup-sg
        GroupDescription: sg for delivery nodegroup in {{cluster_name}} to grant access to delivery loadblancer only
        VpcId: !Ref VpcId
        SecurityGroupIngress:
          - FromPort: '8080'
            IpProtocol: tcp
            ToPort: '8080'
            SourceSecurityGroupId: !Ref DeliveryBackendSecurityGroup
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: 0
            ToPort: 0
            CidrIp: 0.0.0.0/0

  DeliveryBackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: {{cluster_name}}-delivery-backend-sg
      GroupDescription: Backend sg for delivery LB in {{cluster_name}}
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  DeliveryFrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: {{cluster_name}}-delivery-frontend-sg
      GroupDescription: Frontend sg for delivery LB in {{cluster_name}}
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  AuthoringWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Description: Bot control WebACL for Authoring in the {{cluster_name}} cluster
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: AllowedRequests
        SampledRequestsEnabled: true 
      DefaultAction: 
        Allow: {}
      Scope:
        "REGIONAL"
      Rules: 
        - Name: bot-control-rules
          OverrideAction:
            None: {}
          Priority: 0
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesBotControlRuleSet
              ManagedRuleGroupConfigs:
                - AWSManagedRulesBotControlRuleSet:
                    EnableMachineLearning: false
                    InspectionLevel: COMMON
              RuleActionOverrides:
                - Name: CategoryMonitoring
                  ActionToUse:
                    Allow: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: bot-control-rules
            SampledRequestsEnabled: true

  AlarmsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: 
          Ref: AlarmsEmailAddress
        Protocol: email

  CloudOpsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: 
          Ref: CloudOpsEmailAddress
        Protocol: email

  SendCWAlarmsToSlackLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: SendCWAlarmsToSlackLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  SendCWAlarmsToSlackLambdaFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SendCWAlarmsToSlackLambda
      Principal: sns.amazonaws.com

  SendCWAlarmsToSlackLambda:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: craftercms:environment
          Value: {{environment}}
        - Key: craftercms:prod
          Value: {{prod_env}}
      Runtime: python3.9
      Role: !GetAtt SendCWAlarmsToSlackLambdaRole.Arn
      Handler: index.handler
      Timeout: 30
      Environment:
        Variables:
          slackUrl: !Ref AlarmsSlackChannelHookUrl        
      Code:
        ZipFile: |
          import urllib3
          import json
          import os

          slack_url = os.environ['slackUrl']
          http = urllib3.PoolManager()

          def get_alarm_attributes(sns_message):
              alarm = dict()

              alarm['name'] = sns_message['AlarmName']
              alarm['description'] = sns_message['AlarmDescription']
              alarm['reason'] = sns_message['NewStateReason']
              alarm['region'] = sns_message['Region']
              alarm['instance_id'] = sns_message['Trigger']['Metrics'][1]['MetricStat']['Metric']['Dimensions'][0]['value']
              alarm['state'] = sns_message['NewStateValue']
              alarm['previous_state'] = sns_message['OldStateValue']

              return alarm

          def notify_insufficient_data(alarm):
              return {
                  "type": "home",
                  "blocks": [
                      {
                          "type": "header",
                          "text": {
                              "type": "plain_text",
                              "text": ":warning: INSUFFICIENT_DATA: " + alarm['name']
                          }
                      },
                      {
                          "type": "divider"
                      },
                      {
                          "type": "section",
                          "text": {
                              "type": "mrkdwn",
                              "text": "_" + alarm['description'] + "_"
                          },
                          "block_id": "text1"
                      },
                      {
                          "type": "divider"
                      },
                      {
                          "type": "context",
                          "elements": [
                              {
                                  "type": "mrkdwn",
                                  "text": "Region: *" + alarm['region'] + "*"
                              }
                          ]
                      }
                  ]
              }

          def notify_alarm(alarm):
              return {
                  "type": "home",
                  "blocks": [
                      {
                          "type": "header",
                          "text": {
                              "type": "plain_text",
                              "text": ":red_circle: ALARM: " + alarm['name']
                          }
                      },
                      {
                          "type": "divider"
                      },
                      {
                          "type": "section",
                          "text": {
                              "type": "mrkdwn",
                              "text": "_" + alarm['reason'] + "_"
                          },
                          "block_id": "text1"
                      },
                      {
                          "type": "divider"
                      },
                      {
                          "type": "context",
                          "elements": [
                              {
                                  "type": "mrkdwn",
                                  "text": "Region: *" + alarm['region'] + "*"
                              }
                          ]
                      }
                  ]
              }

          def notify_ok(alarm):
              return {
                  "type": "home",
                  "blocks": [
                      {
                          "type": "header",
                          "text": {
                              "type": "plain_text",
                              "text": ":large_green_circle: OK: " + alarm['name']
                          }
                      },
                      {
                          "type": "divider"
                      },
                      {
                          "type": "section",
                          "text": {
                              "type": "mrkdwn",
                              "text": "_" + alarm['reason'] + "_"
                          },
                          "block_id": "text1"
                      },
                      {
                          "type": "divider"
                      },
                      {
                          "type": "context",
                          "elements": [
                              {
                                  "type": "mrkdwn",
                                  "text": "Region: *" + alarm['region'] + "*"
                              }
                          ]
                      }
                  ]
              }

          def handler(event, context):
              sns_message = json.loads(event["Records"][0]["Sns"]["Message"])
              alarm = get_alarm_attributes(sns_message)

              msg = str()

              if alarm['state'] == 'INSUFFICIENT_DATA':
                  msg = notify_insufficient_data(alarm)
              elif alarm['state'] == 'ALARM':
                  msg = notify_alarm(alarm)
              elif alarm['state'] == 'OK':
                  msg = notify_ok(alarm)

              encoded_msg = json.dumps(msg).encode("utf-8")
              resp = http.request("POST", slack_url, body=encoded_msg)
              print(
                  {
                      "message": msg,
                      "status_code": resp.status,
                      "response": resp.data,
                  }
              )

  SlackSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt SendCWAlarmsToSlackLambda.Arn 

  AuthoringPodsDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/authoring-pods-down
      AlarmDescription: Authoring in {{client_id}}/{{cluster_name}} pod count < 1
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), 1, m1)"
          Id: service_number_of_running_pods
          Period: '60'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: Namespace
                  Value: craftercms
                - Name: Service
                  Value: authoring-service
                - Name: ClusterName
                  Value: {{cluster_name}}
              MetricName: service_number_of_running_pods
              Namespace: ContainerInsights
            Period: '60'
            Stat: Average
      EvaluationPeriods: '3'
      DatapointsToAlarm: '2'
      ComparisonOperator: LessThanThreshold
      Threshold: '1'
      TreatMissingData: "breaching"
      AlarmActions:
        - !Ref SlackSNSTopic
      OKActions: 
        - !Ref SlackSNSTopic

  DeliveryPodDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/delivery-pods-down
      AlarmDescription: !Sub "Delivery in {{client_id}}/{{cluster_name}} pod count < ${DeliveryInstanceCount}"
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), ${DeliveryInstanceCount}, m1)"
          Id: service_number_of_running_pods
          Period: '60'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: Namespace
                  Value: craftercms
                - Name: Service
                  Value: delivery-service
                - Name: ClusterName
                  Value: {{cluster_name}}
              MetricName: service_number_of_running_pods
              Namespace: ContainerInsights
            Period: '60'
            Stat: Average
      EvaluationPeriods: '3'
      DatapointsToAlarm: '2'
      ComparisonOperator: LessThanThreshold
      Threshold: !Sub "${DeliveryInstanceCount}"
      AlarmActions:
        - !Ref SlackSNSTopic
      OKActions:
        - !Ref SlackSNSTopic
      TreatMissingData: "breaching"

  DeliveryTomcatHighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/delivery-tomcat-high-memory
      AlarmDescription: Delivery tomcat in {{client_id}}/{{cluster_name}} memory usage is > 90%
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), 1, m1)"
          Id: container_memory_utilization_over_container_limit
          Period: '300'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: Namespace
                  Value: craftercms
                - Name: ClusterName
                  Value: {{cluster_name}}
                - Name: PodName
                  Value: delivery
                - Name: ContainerName
                  Value: tomcat
              MetricName: container_memory_utilization_over_container_limit
              Namespace: ContainerInsights
            Period: '300'
            Stat: Average
      EvaluationPeriods: '1'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '90'
      TreatMissingData: "missing"
      AlarmActions:
        - !Ref SlackSNSTopic
      OKActions: 
        - !Ref SlackSNSTopic

  DeliveryTomcatHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/delivery-tomcat-high-cpu
      AlarmDescription: Delivery tomcat in {{client_id}}/{{cluster_name}} CPU usage is > 90%
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), 1, m1)"
          Id: container_cpu_utilization_over_container_limit
          Period: '300'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: Namespace
                  Value: craftercms
                - Name: ClusterName
                  Value: {{cluster_name}}
                - Name: PodName
                  Value: delivery
                - Name: ContainerName
                  Value: tomcat
              MetricName: container_cpu_utilization_over_container_limit
              Namespace: ContainerInsights
            Period: '300'
            Stat: Average
      EvaluationPeriods: '1'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '90'
      TreatMissingData: "missing"
      AlarmActions:
        - !Ref SlackSNSTopic
      OKActions: 
        - !Ref SlackSNSTopic

  AuthoringTomcatHighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/authoring-tomcat-high-memory
      AlarmDescription: Authoring tomcat in {{client_id}}/{{cluster_name}} memory usage is > 90%
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), 1, m1)"
          Id: container_memory_utilization_over_container_limit
          Period: '300'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: Namespace
                  Value: craftercms
                - Name: ClusterName
                  Value: {{cluster_name}}
                - Name: PodName
                  Value: authoring-0
                - Name: ContainerName
                  Value: tomcat
              MetricName: container_memory_utilization_over_container_limit
              Namespace: ContainerInsights
            Period: '300'
            Stat: Average
      EvaluationPeriods: '1'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '90'
      TreatMissingData: "missing"
      AlarmActions:
        - !Ref SlackSNSTopic
      OKActions: 
        - !Ref SlackSNSTopic

  AuthoringDeployerHighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/authoring-deployer-high-memory
      AlarmDescription: Authoring deployer in {{client_id}}/{{cluster_name}} memory usage is > 90%
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), 1, m1)"
          Id: container_memory_utilization_over_container_limit
          Period: '300'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: Namespace
                  Value: craftercms
                - Name: ClusterName
                  Value: {{cluster_name}}
                - Name: PodName
                  Value: authoring-0
                - Name: ContainerName
                  Value: deployer
              MetricName: container_memory_utilization_over_container_limit
              Namespace: ContainerInsights
            Period: '300'
            Stat: Average
      EvaluationPeriods: '1'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '90'
      TreatMissingData: "missing"
      AlarmActions:
        - !Ref SlackSNSTopic
      OKActions: 
        - !Ref SlackSNSTopic

  AuthoringTomcatHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/authoring-tomcat-high-cpu
      AlarmDescription: Authoring tomcat in {{client_id}}/{{cluster_name}} CPU usage is > 90%
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), 1, m1)"
          Id: container_cpu_utilization_over_container_limit
          Period: '300'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: Namespace
                  Value: craftercms
                - Name: ClusterName
                  Value: {{cluster_name}}
                - Name: PodName
                  Value: authoring-0
                - Name: ContainerName
                  Value: tomcat
              MetricName: container_cpu_utilization_over_container_limit
              Namespace: ContainerInsights
            Period: '300'
            Stat: Average
      EvaluationPeriods: '1'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '90'
      TreatMissingData: "missing"
      AlarmActions:
        - !Ref SlackSNSTopic
      OKActions: 
        - !Ref SlackSNSTopic

  AuthoringDeployerHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/authoring-deployer-high-cpu
      AlarmDescription: Authoring deployer in {{client_id}}/{{cluster_name}} CPU usage is > 90%
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), 1, m1)"
          Id: container_cpu_utilization_over_container_limit
          Period: '300'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: Namespace
                  Value: craftercms
                - Name: ClusterName
                  Value: {{cluster_name}}
                - Name: PodName
                  Value: authoring-0
                - Name: ContainerName
                  Value: deployer
              MetricName: container_cpu_utilization_over_container_limit
              Namespace: ContainerInsights
            Period: '300'
            Stat: Average
      EvaluationPeriods: '1'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '90'
      TreatMissingData: "missing"
      AlarmActions:
        - !Ref SlackSNSTopic
      OKActions: 
        - !Ref SlackSNSTopic

  AuthoringDataVolumeCapacityAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/authoring-data-volume-capacity
      AlarmDescription: Data Volume capacity in Authoring {{client_id}}/{{cluster_name}} pod is less than 20 GB
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), 200000000000, m1)"
          Id: kubelet_volume_stats_available_bytes
          Period: '300'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: NodeGroup
                  Value: authoring-workers-az1-v1
                - Name: persistentvolumeclaim
                  Value: data-authoring-0
                - Name: ClusterName
                  Value: {{cluster_name}}
              MetricName: kubelet_volume_stats_available_bytes
              Namespace: ContainerInsights/Prometheus
            Period: '300'
            Stat: Average
      EvaluationPeriods: '1'
      ComparisonOperator: LessThanThreshold
      Threshold: '20000000000'
      TreatMissingData: "missing"
      AlarmActions:
        - !Ref CloudOpsSNSTopic
        - !Ref SlackSNSTopic
      OKActions: 
        - !Ref CloudOpsSNSTopic
        - !Ref SlackSNSTopic

  AuthoringLogsVolumeUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/authoring-logs-volume-usage
      AlarmDescription: Logs volume usage in Authoring {{client_id}}/{{cluster_name}} pod is more than 16 GB
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), 500000000, m1)"
          Id: kubelet_volume_stats_used_bytes
          Period: '300'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: NodeGroup
                  Value: authoring-workers-az1-v1
                - Name: persistentvolumeclaim
                  Value: logs-authoring-0
                - Name: ClusterName
                  Value: {{cluster_name}}
              MetricName: kubelet_volume_stats_used_bytes
              Namespace: ContainerInsights/Prometheus
            Period: '300'
            Stat: Average
      EvaluationPeriods: '1'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '16000000000'
      TreatMissingData: "missing"
      AlarmActions:
        - !Ref CloudOpsSNSTopic
        - !Ref SlackSNSTopic
      OKActions: 
        - !Ref CloudOpsSNSTopic
        - !Ref SlackSNSTopic

  AuthoringDataVolumeFreeInodesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CloudWatchAlarmsEnabled
    Properties:
      AlarmName: {{client_id}}/{{cluster_name}}/authoring-data-volume-free-inodes
      AlarmDescription: Free inodes in Authoring {{client_id}}/{{cluster_name}} pod are < 100000
      Metrics:
        - Expression: !Sub "IF((DAY(m1) == ${BlackoutWindowDay} AND (HOUR(m1) >= ${BlackoutWindowStartHour} AND HOUR(m1) <= ${BlackoutWindowEndHour})), 1000000, m1)"
          Id: kubelet_volume_stats_available_bytes
          Period: '300'
          ReturnData: True
        - Id: m1
          ReturnData: False
          MetricStat:
            Metric:
              Dimensions:
                - Name: NodeGroup
                  Value: authoring-workers-az1-v1
                - Name: persistentvolumeclaim
                  Value: data-authoring-0
                - Name: ClusterName
                  Value: {{cluster_name}}
              MetricName: kubelet_volume_stats_available_bytes
              Namespace: ContainerInsights/Prometheus
            Period: '300'
            Stat: Average
      EvaluationPeriods: '1'
      ComparisonOperator: LessThanThreshold
      Threshold: '100000'
      TreatMissingData: "missing"
      AlarmActions:
        - !Ref CloudOpsSNSTopic
        - !Ref SlackSNSTopic
      OKActions: 
        - !Ref CloudOpsSNSTopic
        - !Ref SlackSNSTopic

  GuardDutyEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SecurityGroupIds:
          - !Ref GuardDutySecurityGroup
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.guardduty-data"
      SubnetIds: !Ref PrivateSubnetIds
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "*",
              "Resource": "*",
              "Effect": "Allow",
              "Principal": "*"
            },
            {
              "Condition": {
                "StringNotEquals": {
                  "aws:PrincipalAccount": "${AWS::AccountId}" 
                }
              },
              "Action": "*",
              "Resource": "*",
              "Effect": "Deny",
              "Principal": "*"
            }
          ]
        }
  GuardDutySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "GuardDuty security group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 1
          CidrIp: 0.0.0.0/32

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds: !Ref PrivateRouteTableIds
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VpcId
        
  OpenSearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows access to OpenSearch domains from the nodes of the {{cluster_name}} cluster"
      VpcId: !Ref VpcId
      GroupName: "{{cluster_name}}-es-sg"
      SecurityGroupIngress:
        - FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
          SourceSecurityGroupId: !Ref ClusterNodesSecurityGroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: '{{cluster_name}}-opensearch'
      EngineVersion: !Ref OpenSearchVersion
      EncryptionAtRestOptions:
        Enabled: true
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: !If [IsOpenSearchSingleNodeCluster, '1', '3']
        ZoneAwarenessEnabled: !If [IsOpenSearchSingleNodeCluster, 'false', 'true']
        ZoneAwarenessConfig:
          !If
          - IsOpenSearchSingleNodeCluster
          - !Ref 'AWS::NoValue'
          - AvailabilityZoneCount: "3"
        InstanceType: "m5.large.search"
        MultiAZWithStandbyEnabled: false
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 20
        Iops: 3000
        Throughput: 125
        VolumeType: "gp3"
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/{{cluster_name}}-opensearch/*"
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: 'true'
        indices.query.bool.max_clause_count: '8192'
      VPCOptions:
        SubnetIds:
          !If
          - IsOpenSearchSingleNodeCluster
          - 
            - !Select [0, !Ref PrivateSubnetIds] 
          - !Ref PrivateSubnetIds
        SecurityGroupIds:
          - !Ref OpenSearchSecurityGroup

  KuberVolumeLifecyclePolicy:
    Type: AWS::DLM::LifecyclePolicy
    Properties:
      Description: "{{cluster_name}} Kubernetes Volume Backups"
      State: "ENABLED"
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/AWSDataLifecycleManagerDefaultRole"
      PolicyDetails:
        ResourceTypes:
          - "VOLUME"
        TargetTags:
          - Key: "kubernetes.io/cluster/{{cluster_name}}"
            Value: "owned"
        Schedules:
          - Name: "Daily Backup"
            CreateRule:
              Interval: 24
              IntervalUnit: "HOURS"
              Times:
                - "{{kuber_volume_daily_backup_time_utc}}"
            RetainRule:
              Count: 3
            CopyTags: true
            CrossRegionCopyRules:
              !If
              - UseBackupRegion
              - 
                - Target: !Ref BackupRegion              
                  Encrypted: false
                  CopyTags: true
                  RetainRule:
                    Interval: 3
                    IntervalUnit: "DAYS"    
              - !Ref 'AWS::NoValue'

  S3BackupBucketLambdaRole:
    Type: AWS::IAM::Role
    Condition: UseBackupRegion
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: S3BackupBucketLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:PutBucketPublicAccessBlock
                  - s3:PutBucketVersioning
                Resource: !Sub "arn:aws:s3:::${BackupRegionBucketNamePrefix}-*"

  S3BackupBucketLambda:
    Type: AWS::Lambda::Function
    Condition: UseBackupRegion
    Properties:
      Tags:
        - Key: craftercms:environment
          Value: {{environment}}
        - Key: craftercms:prod
          Value: {{prod_env}}
      FunctionName: "{{cluster_name}}-s3-backup-bucket-lambda"
      Runtime: python3.9
      Role: !GetAtt S3BackupBucketLambdaRole.Arn
      Handler: index.handler
      Timeout: 30
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import boto3
          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class BackupBucketSetupException(Exception):
              pass

          def handler(event, context):
              bucket_name = event['ResourceProperties']['BackupBucketName']
              bucket_region = event['ResourceProperties']['BackupBucketRegion']

              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      client = boto3.client('s3', region_name=bucket_region)

                      try:
                          if bucket_region == 'us-east-1':
                              client.create_bucket(Bucket=bucket_name)
                          else:
                              client.create_bucket(
                                  Bucket=bucket_name,
                                  CreateBucketConfiguration={
                                      'LocationConstraint': bucket_region
                                  }
                              )                          

                          logger.info("Created bucket '%s'", bucket_name)
                      except ClientError as error:
                          if error.response['Error']['Code'] == 'BucketAlreadyOwnedByYou':
                              logger.warning("Bucket '%s' already exists! Using it", bucket_name)
                          else:
                              raise

                      client.put_public_access_block(
                          Bucket=bucket_name,
                          PublicAccessBlockConfiguration={
                              'BlockPublicAcls': True,
                              'IgnorePublicAcls': True,
                              'BlockPublicPolicy': True,
                              'RestrictPublicBuckets': True
                          }
                      )

                      logger.info("Blocked all public access to bucket '%s'", bucket_name)

                      client.put_bucket_versioning(
                          Bucket=bucket_name,
                          VersioningConfiguration={
                              'Status': 'Enabled'
                          }
                      )

                      logger.info("Enabled versioning on bucket '%s'", bucket_name)
                      logger.info("Setup of backup bucket '%s' complete", bucket_name)

                      response_data = {
                          'Name': bucket_name,
                          'Arn': f"arn:aws:s3:::{bucket_name}"
                      }

                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, bucket_name)
                  elif event['RequestType'] == 'Delete':
                      logger.info("Please delete the '%s' backup bucket", bucket_name)

                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, bucket_name)
              except Exception as error:
                  logger.exception("Error when setting up backup bucket '%s'", bucket_name)

                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(error)})

Outputs:
  AlarmsSNSTopicArn:
    Value: !Ref AlarmsSNSTopic
  CloudOpsSNSTopicArn:
    Value: !Ref CloudOpsSNSTopic
  SlackSNSTopicArn:
    Value: !Ref SlackSNSTopic
  OpenSearchDomainEndpoint:
    Value: !GetAtt OpenSearchDomain.DomainEndpoint
  S3BackupBucketLambdaArn:
    Value: !GetAtt [S3BackupBucketLambda, Arn]
    Condition: UseBackupRegion
  AuthoringWebACLArn:
    Value: !GetAtt AuthoringWebACL.Arn
  AuthoringBackendSecurityGroup:
    Value: !GetAtt AuthoringBackendSecurityGroup.GroupId
  AuthoringFrontendSecurityGroup:
    Value: !GetAtt AuthoringFrontendSecurityGroup.GroupId
  AuthoringNodeGroupSecurityGroup:
    Value: !GetAtt AuthoringNodeGroupSecurityGroup.GroupId
  DeliveryBackendSecurityGroup:
    Value: !GetAtt DeliveryBackendSecurityGroup.GroupId
  DeliveryFrontendSecurityGroup:
    Value: !GetAtt DeliveryFrontendSecurityGroup.GroupId
  DeliveryNodeGroupSecurityGroup:
    Value: !GetAtt DeliveryNodeGroupSecurityGroup.GroupId